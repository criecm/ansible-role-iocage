---
- include_vars: jail.yml

- name: show jail var
  debug:
    msg: '{{ jail }}'

- name: check fstab
  template:
    src: '{{ jail.fstab }}'
    dest: '/iocage/jails/{{ jail.name }}/fstab'
  when: '"fstab" in jail and jail.fstab != "" and jail.name not in iocage_fact.ansible_facts.iocage_templates'
  check_mode: True
  register: jail_fstab

- name: stop jail to change fstab
  block:
    - name: stop jail
      iocage:
        name: '{{ jail.name }}'
        state: stopped
    - name: copy fstab
      template:
        src: '{{ jail.fstab }}'
        dest: '/iocage/jails/{{ jail.name }}/fstab'
      when: jail_fstab.changed | default(False)
      notify: restart jail
      register: jail_fstab
  when: jail_fstab.changed | default(False) and jail.name in iocage_fact.ansible_facts.iocage_jails

- name: create jail
  iocage: 
    name: '{{ jail.name }}'
    properties: '{{ jail.properties }}'
    state: '{{ iocage_jail_type }}'
  register: iocage_create
  when: 'not jail.name in iocage_fact.ansible_facts.iocage_jails'

- name: set jail properties
  iocage:
    name: '{{ jail.name }}'
    properties: '{{ jail.properties }}'
    state: set
  register: iocage_set
  when: not iocage_create.changed
  ignore_errors: True

- name: stop jail to set properties
  block:
    - name: stop jail
      iocage:
        name: '{{ jail.name }}'
        state: stopped
    - name: set props
      iocage:
        name: '{{ jail.name }}'
        properties: '{{ jail.properties }}'
        state: set
  when: not iocage_create.changed and iocage_set.failed and iocage_set.msg is search("Please stop it first!")

- name: iocage_jail fact
  set_fact:
    iocage_jail: '{% if iocage_create.changed %}{{ iocage_create.ansible_facts.iocage_jails[jail.name] }}{% elif iocage_set.changed %}{{ iocage_set.ansible_facts.iocage_jails[jail.name] }}{% else %}{{ iocage_fact.ansible_facts.iocage_jails[jail.name] }}{% endif %}'
    jail_changed: '{% if iocage_create.changed or iocage_set.changed or force_changed_jail | default(False) %}True{% else %}False{% endif %}'

- name: ssh config
  block:
    - name: mkdir .ssh
      file:
        dest: '/iocage/jails/{{ iocage_jail.name }}/root/root/.ssh'
        mode: '0700'
        state: directory
    - name: set sshd root
      copy:
        remote_src: True
        src: '{{ iocage_jail.authkeys | default("/root/.ssh/authorized_keys") }}'
        directory_mode: '0700'
        dest: '/iocage/jails/{{ iocage_jail.name }}/root/root/.ssh/authorized_keys'
    - name: restore ssh host keys
      copy:
        src: '{{ sshkey }}'
        dest: '/iocage/jails/{{ iocage_jail.name }}/root/etc/ssh/{{ sshkey | regex_replace(".*/","") }}'
        mode: '0600'
      with_fileglob:
        - '{{ playbook_dir }}/files/ssh/{{ iocage_jail.name }}/ssh_host*_key'
      loop_control:
        loop_var: sshkey
    - name: initial permit root login
      lineinfile:
        line: 'PermitRootLogin prohibit-password'
        regexp: '^PermitRootLogin'
        dest: '/iocage/jails/{{ iocage_jail.name }}/root/etc/ssh/sshd_config'
  when: iocage_enable_ssh and jail_changed and jail.name not in iocage_fact.ansible_facts.iocage_templates

- name: enable base services
  lineinfile:
    dest: '/iocage/jails/{{ iocage_jail.name }}/root/etc/rc.conf'
    line: '{{ item }}'
  with_items:
    - '{% if jail.properties.jail_zfs is defined and jail.properties.jail_zfs | bool %}zfs_enable="YES"{% endif %}'
    - '{% if iocage_enable_ssh | bool %}sshd_enable="YES"{% endif %}'
  notify: restart jail
  when: item != '' and jail.name not in iocage_fact.ansible_facts.iocage_templates

- name: get fstab mountpoints
  shell: "awk '/^[^#]/{print $2}' /iocage/jails/{{ iocage_jail.name }}/fstab"
  register: mntdirs
  changed_when: False
  failed_when: False
  when: jail_fstab.changed == True

- name: NFS opts if needed
  block:
    - name: slurp jail mounts
      slurp:
        src: '/iocage/jails/{{ jail.name }}/fstab'
      register: jailmounts
    - name: check for nfs mounts
      set_fact:
        jail_has_nfs_mounts: '{% if jailmounts["content"] | b64decode is regex("^[a-z][-a-z0-9\.]+:/.*[\t ]nfs",multiline=True) %}True{% else %}False{% endif %}'
    - name: activate nfsuserd
      lineinfile:
        dest: '/iocage/jails/{{ iocage_jail.name }}/root/etc/rc.conf'
        line: '{{ item }}'
        regexp: '^{{ item | regex_replace("=.*","") }}='
      loop:
        - 'nfsuserd_enable="YES"'
        - 'nfsuserd_flags="-domain {{ idmap_domain }}"'
      notify: restart jail
    - name: jail props needed
      iocage:
        name: '{{ jail.name }}'
        properties:
          allow_nfsd: '1'
          enforce_statfs: '1'
        state: set
      notify: restart jail
  when: idmap_domain | default(False) and iocage_fact.ansible_facts.iocage_jails[jail.name].properties.release | regex_replace("-[A-Z].*$","") is version_compare("13.3",">=")

- name: mkdir fstab mountpoints
  file:
    state: directory
    dest: '{{ dir }}'
  when: 'jail_fstab.changed == True and jail.name not in iocage_fact.ansible_facts.iocage_templates'
  with_items: '{{ mntdirs.stdout_lines | default([]) }}'
  loop_control:
    loop_var: dir
  notify: restart jail

- name: start jail
  iocage:
    name: '{{ jail.name }}'
    state: started
  when: 'jail.name not in iocage_fact.ansible_facts.iocage_templates'

- name: check for pkg
  stat:
    path: '/iocage/jails/{{ iocage_jail.name }}/root/usr/local/sbin/pkg'
  register: pkg_installed

- name: install python in jail
  shell: 'env ASSUME_ALWAYS_YES=yes pkg -c /iocage/jails/{{ iocage_jail.name }}/root install -y pkg python python3 rsync'
  when: not pkg_installed.stat.exists and jail.name not in iocage_fact.ansible_facts.iocage_templates

- name: add jail to inventory
  add_host:
    name: '{{ jail.name }}'
    ansible_host: '{{ jail.hostname }}'
    groups: [ iojails ]
    iocage_host: '{{ inventory_hostname }}'
  when: jail.name not in hostvars.keys()

- name: (re)start sshd
  shell: 'iocage exec {{ jail.name }} pgrep sshd && iocage exec {{ jail.name }} service sshd restart || iocage exec {{ jail.name }} service sshd start'
  when: iocage_enable_ssh

- name: 'add host fact to jail {{ jail.name }}'
  set_fact:
    iojail:
      host: '{{ inventory_hostname }}'
    cacheable: yes
  delegate_to: '{{ jail.name }}'
  delegate_facts: True

- name: 'jail facts dir on {{ jail.name }}'
  file:
    path: '{{ etcprefix }}/etc/ansible/facts.d'
    state: directory
  delegate_to: '{{ jail.name }}'

- name: 'jail local fact on {{ jail.name }}'
  copy:
    dest: '{{ etcprefix }}/etc/ansible/facts.d/iojail.fact'
    content: >
      {"host":{{ inventory_hostname | to_json }},"properties":{{ jail.properties | default({}) | to_json }}}
  delegate_to: '{{ jail.name }}'

- name: 'import role {{ jail_init_role }}'
  import_role:
    name: '{{ jail_init_role }}'
  vars:
    is_jail: True
    do_sysadm: True
  delegate_to: '{{ jail.name }}'
  delegate_facts: True
  when: jail_init_role | length > 0
